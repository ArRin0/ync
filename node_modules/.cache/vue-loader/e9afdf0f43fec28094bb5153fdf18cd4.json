{"remainingRequest":"D:\\GitHub\\ync\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\GitHub\\ync\\src\\components\\line.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\GitHub\\ync\\src\\components\\line.vue","mtime":1594569855378},{"path":"D:\\GitHub\\ync\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1594457101316},{"path":"D:\\GitHub\\ync\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1594457104788},{"path":"D:\\GitHub\\ync\\node_modules\\babel-loader\\lib\\index.js","mtime":1594457101192},{"path":"D:\\GitHub\\ync\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1594457101316},{"path":"D:\\GitHub\\ync\\node_modules\\vue-loader\\lib\\index.js","mtime":1594457104892}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n\n  export default {\n    name: \"linechart\",\n    props: [\"id\", \"data\"], //接受从父组件传回的值\n    data() {\n      return {}\n    },\n    //实时监听父组件传过来的值\n    //然后执行drawBar方法 重新绘制柱状图\n    watch: {\n      data: {\n        handler(value) {\n          this.drawBar(value);\n        },\n        deep: true,//深度监听\n\t\timmediate: true,\n      }\n    },\n    mounted() {\n      this.drawBar(this.data)\n    },\n    methods: {\n      drawBar({\n                textTile = '',  // 标题 柱状图options里需要用的数据这里作为参数从data里面取值\n                nameArray = [],//x轴的数据\n                series = [],//series的数据\n              } = {}  //作为一个整体的参数\n      ) {   //现在是真正开始画图表的时候\n        let barBox = this.$echarts.init(document.getElementById(this.id));\n        //给图表一个指定的容器dom\n        let option = { //设置图表的options\n          //1.先设置图表的标题\n          title: {\n            text: textTile,//使用父组件传过来的数据\n            x:50,\n\t\t\ty:15,\n            textStyle:{\n            \twidth: 218,\n            \theight: 24,\n            \tfontSize: 18,\n            \tfontWeight: 0,\n            }\n          },\n\t\t  tooltip: {//折线拐点提示\n\t\t       trigger: 'axis'\n\t\t  },\n          //3.x轴相关结构\n          xAxis:\n            {\n              data: nameArray,\n\t\t\t  boundaryGap: false,\n              type: 'category',\n              axisLine:{\n              \tlineStyle:{\n              \t\tcolor: 'grey',\n              \t\twidth: 2,\n              \t}\n              },\n              }, \n          //4.y轴相关结构\n          yAxis:\n            {\n              type: 'value',\n              boundaryGap: [52, 52],\n              max: 75,\n              min: 0,\n              interval: 15,\n              axisLine:{\n              \tlineStyle:{\n              \t\tcolor: 'grey',\n              \t\twidth: 0,\n              \t}\n              }\n            },\n\n          //6.图表的相关series设置\n          series: series,\n        };\n        //柱状图的相关结构已经定义好了调用setoption\n        barBox.setOption(option, true);\n        console.log(option)\n        window.addEventListener(\"resize\", function () {\n          barBox.resize();\n        })\n      }\n    },\n  }\n",{"version":3,"sources":["line.vue"],"names":[],"mappings":";;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"line.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div class=\"echarts\">\r\n      <div v-bind:id=id ref=\"data\" style=\"width: 837px;height: 357px\"></div>\r\n  </div>\n</template>\n\n<script>\n  export default {\n    name: \"linechart\",\n    props: [\"id\", \"data\"], //接受从父组件传回的值\n    data() {\n      return {}\n    },\n    //实时监听父组件传过来的值\n    //然后执行drawBar方法 重新绘制柱状图\n    watch: {\n      data: {\n        handler(value) {\n          this.drawBar(value);\n        },\n        deep: true,//深度监听\r\n\t\timmediate: true,\n      }\n    },\n    mounted() {\n      this.drawBar(this.data)\n    },\n    methods: {\n      drawBar({\n                textTile = '',  // 标题 柱状图options里需要用的数据这里作为参数从data里面取值\n                nameArray = [],//x轴的数据\n                series = [],//series的数据\n              } = {}  //作为一个整体的参数\n      ) {   //现在是真正开始画图表的时候\n        let barBox = this.$echarts.init(document.getElementById(this.id));\n        //给图表一个指定的容器dom\n        let option = { //设置图表的options\n          //1.先设置图表的标题\n          title: {\n            text: textTile,//使用父组件传过来的数据\n            x:50,\r\n\t\t\ty:15,\r\n            textStyle:{\r\n            \twidth: 218,\r\n            \theight: 24,\r\n            \tfontSize: 18,\r\n            \tfontWeight: 0,\r\n            }\n          },\r\n\t\t  tooltip: {//折线拐点提示\r\n\t\t       trigger: 'axis'\r\n\t\t  },\n          //3.x轴相关结构\n          xAxis:\n            {\n              data: nameArray,\r\n\t\t\t  boundaryGap: false,\n              type: 'category',\r\n              axisLine:{\r\n              \tlineStyle:{\r\n              \t\tcolor: 'grey',\r\n              \t\twidth: 2,\r\n              \t}\r\n              },\n              }, \n          //4.y轴相关结构\n          yAxis:\n            {\n              type: 'value',\r\n              boundaryGap: [52, 52],\r\n              max: 75,\r\n              min: 0,\r\n              interval: 15,\r\n              axisLine:{\r\n              \tlineStyle:{\r\n              \t\tcolor: 'grey',\r\n              \t\twidth: 0,\r\n              \t}\r\n              }\n            },\n\n          //6.图表的相关series设置\n          series: series,\n        };\n        //柱状图的相关结构已经定义好了调用setoption\n        barBox.setOption(option, true);\n        console.log(option)\n        window.addEventListener(\"resize\", function () {\n          barBox.resize();\n        })\n      }\n    },\n  }\n</script>\n\n\n<style>\n</style>\n"]}]}