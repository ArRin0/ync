{"remainingRequest":"C:\\Users\\asus\\Desktop\\ync\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\asus\\Desktop\\ync\\src\\pages\\index\\current-session\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\asus\\Desktop\\ync\\src\\pages\\index\\current-session\\index.vue","mtime":1594350697000},{"path":"C:\\Users\\asus\\Desktop\\ync\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1594568584718},{"path":"C:\\Users\\asus\\Desktop\\ync\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1594568600931},{"path":"C:\\Users\\asus\\Desktop\\ync\\node_modules\\babel-loader\\lib\\index.js","mtime":1594568583942},{"path":"C:\\Users\\asus\\Desktop\\ync\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1594568584718},{"path":"C:\\Users\\asus\\Desktop\\ync\\node_modules\\vue-loader\\lib\\index.js","mtime":1594568601747}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n\nimport SessionList from '../components/SessionList.vue'\nimport SessionWindow from '../components/SessionWindow.vue'\n\nexport default{\n\tname:\"CurrentSession\",\n\tcomponents:{\n\t\tSessionList,SessionWindow\n\t},\n\tdata:function(){\n\t\treturn {\n\t\t\tsession:null,\n\t\t\tsocket:null,\n\t\t\tsessionList:[],\n\t\t\tmsgs:[]\n\t\t}\n\t},\n\tmethods:{\n\t\tnoticeWindow:function(session){\n\t\t\tthis.session = session;\n\t\t\tthis.msgs=[]\n\t\t},\n\t\tinitWebsocket:function(){\n\t\t\tif(typeof(WebSocket) == \"undefined\") {\n\t\t\t    console.log(\"您的浏览器不支持WebSocket\");\n\t\t\t}else{\n\t\t\t    console.log(\"您的浏览器支持WebSocket\");\n\t\t\t    //实现化WebSocket对象，指定要连接的服务器地址与端口  建立连接\n\t\t\t    var userId = JSON.parse(localStorage.getItem(\"user\")).id;\n\t\t\t    var socketUrl=\"ws://localhost:8080/ccs/webSocket/\"+userId+\"/cs\";\n\t\t\t    // var socketUrl=\"ws://192.168.0.231:22599/webSocket/\"+userId;\n\t\t\t    console.log(socketUrl);\n\t\t\t    if(this.socket!=null){\n\t\t\t        this.socket.close();\n\t\t\t        this.socket=null;\n\t\t\t    }\n\t\t\t    this.socket = new WebSocket(socketUrl);\n\t\t\t    //打开事件\n\t\t\t    this.socket.onopen = function() {\n\t\t\t        console.log(\"websocket已打开\");\n\t\t\t        //socket.send(\"这是来自客户端的消息\" + location.href + new Date());\n\t\t\t    };\n\t\t\t    //获得消息事件\n\t\t\t    this.socket.onmessage = (resp)=>{\n\t\t\t\t\tlet data = JSON.parse(resp.data);\n\t\t\t\t\tif(data.type){\n\t\t\t\t\t\tthis.sessionList = data.sessionList;\n\t\t\t\t\t}else{\n\t\t\t\t\t\tthis.msgs.push(data);\n\t\t\t\t\t\tconsole.log(this.msgs);\n\t\t\t\t\t}\n\t\t\t\t\t// console.log(this.sessionList)\n\t\t\t        //当接收到websocket服务器发送当消息当时候，判断消息是会话列表有更新还是会话消息有更新，更新对应当子组件\n\t\t\t    };\n\t\t\t    //关闭事件\n\t\t\t    this.socket.onclose = function() {\n\t\t\t        console.log(\"websocket已关闭\");\n\t\t\t    };\n\t\t\t    //发生了错误事件\n\t\t\t    this.socket.onerror = function() {\n\t\t\t        console.log(\"websocket发生了错误\");\n\t\t\t    }\n\t\t\t}\n\t\t}\n\t},\n\tmounted() {\n\t\t// 当页面显示后，客服应该连接websocket\n\t\tthis.initWebsocket();\n\t}\n}\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;AAQA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/pages/index/current-session","sourcesContent":["<template>\n\t<div class=\"current-session\">\n\t\t<session-list type=\"current\" @selectedSession=\"noticeWindow\" :sessionList=\"sessionList\"></session-list>\n\t\t<session-window :session=\"session\" :msgs=\"msgs\" :socket=\"socket\"></session-window>\n\t</div>\n</template>\n\n<script>\n\timport SessionList from '../components/SessionList.vue'\n\timport SessionWindow from '../components/SessionWindow.vue'\n\t\n\texport default{\n\t\tname:\"CurrentSession\",\n\t\tcomponents:{\n\t\t\tSessionList,SessionWindow\n\t\t},\n\t\tdata:function(){\n\t\t\treturn {\n\t\t\t\tsession:null,\n\t\t\t\tsocket:null,\n\t\t\t\tsessionList:[],\n\t\t\t\tmsgs:[]\n\t\t\t}\n\t\t},\n\t\tmethods:{\n\t\t\tnoticeWindow:function(session){\n\t\t\t\tthis.session = session;\n\t\t\t\tthis.msgs=[]\n\t\t\t},\n\t\t\tinitWebsocket:function(){\n\t\t\t\tif(typeof(WebSocket) == \"undefined\") {\n\t\t\t\t    console.log(\"您的浏览器不支持WebSocket\");\n\t\t\t\t}else{\n\t\t\t\t    console.log(\"您的浏览器支持WebSocket\");\n\t\t\t\t    //实现化WebSocket对象，指定要连接的服务器地址与端口  建立连接\n\t\t\t\t    var userId = JSON.parse(localStorage.getItem(\"user\")).id;\n\t\t\t\t    var socketUrl=\"ws://localhost:8080/ccs/webSocket/\"+userId+\"/cs\";\n\t\t\t\t    // var socketUrl=\"ws://192.168.0.231:22599/webSocket/\"+userId;\n\t\t\t\t    console.log(socketUrl);\n\t\t\t\t    if(this.socket!=null){\n\t\t\t\t        this.socket.close();\n\t\t\t\t        this.socket=null;\n\t\t\t\t    }\n\t\t\t\t    this.socket = new WebSocket(socketUrl);\n\t\t\t\t    //打开事件\n\t\t\t\t    this.socket.onopen = function() {\n\t\t\t\t        console.log(\"websocket已打开\");\n\t\t\t\t        //socket.send(\"这是来自客户端的消息\" + location.href + new Date());\n\t\t\t\t    };\n\t\t\t\t    //获得消息事件\n\t\t\t\t    this.socket.onmessage = (resp)=>{\n\t\t\t\t\t\tlet data = JSON.parse(resp.data);\n\t\t\t\t\t\tif(data.type){\n\t\t\t\t\t\t\tthis.sessionList = data.sessionList;\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tthis.msgs.push(data);\n\t\t\t\t\t\t\tconsole.log(this.msgs);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// console.log(this.sessionList)\n\t\t\t\t        //当接收到websocket服务器发送当消息当时候，判断消息是会话列表有更新还是会话消息有更新，更新对应当子组件\n\t\t\t\t    };\n\t\t\t\t    //关闭事件\n\t\t\t\t    this.socket.onclose = function() {\n\t\t\t\t        console.log(\"websocket已关闭\");\n\t\t\t\t    };\n\t\t\t\t    //发生了错误事件\n\t\t\t\t    this.socket.onerror = function() {\n\t\t\t\t        console.log(\"websocket发生了错误\");\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tmounted() {\n\t\t\t// 当页面显示后，客服应该连接websocket\n\t\t\tthis.initWebsocket();\n\t\t}\n\t}\n</script>\n\n<style>\n.current-session{\n\tdisplay: flex;\n}\n\n\n</style>\n"]}]}