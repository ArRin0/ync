{"remainingRequest":"/Users/mangzhong/quan/day13/node_modules/babel-loader/lib/index.js!/Users/mangzhong/quan/day13/src/utils/request.js","dependencies":[{"path":"/Users/mangzhong/quan/day13/src/utils/request.js","mtime":1593679740978},{"path":"/Users/mangzhong/quan/day13/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mangzhong/quan/day13/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import axios from 'axios'; // import { MessageBox, Message } from 'element-ui'\n// import store from '@/store'\n// import { getToken } from '@/utils/auth'\n// create an axios instance\n\nvar service = axios.create({\n  baseURL: process.env.VUE_APP_BASE_API,\n  // url = base url + request url\n  withCredentials: true,\n  // send cookies when cross-domain requests\n  timeout: 5000 // request timeout\n\n}); // request interceptor\n\nservice.interceptors.request.use(function (config) {\n  // do something before request is sent\n  // if (store.getters.token) {\n  // let each request carry token\n  // ['X-Token'] is a custom headers key\n  // please modify it according to the actual situation\n  // config.headers['X_ACCESS_TOKEN'] = \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1OTM2MTU0MzUsInVzZXJuYW1lIjoiMTU4NTI1MzcwNjUifQ.cnyJ0fPcnLAUl2dxp1jPt2zBPjhKby9djRhvuxzao3o\";//getToken()\n  // }\n  return config;\n}, function (error) {\n  // do something with request error\n  console.log(error); // for debug\n\n  return Promise.reject(error);\n}); // response interceptor\n\nservice.interceptors.response.use(\n/**\n * If you want to get http information such as headers or status\n * Please return  response => response\n*/\n\n/**\n * Determine the request status by custom code\n * Here is just an example\n * You can also judge the status by HTTP Status Code\n */\nfunction (response) {\n  var res = response.data;\n  debugger; // if the custom code is not 20000, it is judged as an error.\n\n  if (res.code !== 200) {\n    // Message({\n    //   message: res.message || 'Error',\n    //   type: 'error',\n    //   duration: 5 * 1000\n    // })\n    // 50008: Illegal token; 50012: Other clients logged in; 50014: Token expired;\n    if (res.code === 50008 || res.code === 50012 || res.code === 50014) {// to re-login\n      // MessageBox.confirm('You have been logged out, you can cancel to stay on this page, or log in again', 'Confirm logout', {\n      //   confirmButtonText: 'Re-Login',\n      //   cancelButtonText: 'Cancel',\n      //   type: 'warning'\n      // }).then(() => {\n      //   // store.dispatch('user/resetToken').then(() => {\n      //   //   location.reload()\n      //   // })\n      // })\n    }\n\n    return Promise.reject(new Error(res.message || 'Error'));\n  } else {\n    return res;\n  }\n}, function (error) {\n  console.log('err' + error); // for debug\n\n  Message({\n    message: error.message,\n    type: 'error',\n    duration: 5 * 1000\n  });\n  return Promise.reject(error);\n});\nexport default service;",{"version":3,"sources":["/Users/mangzhong/quan/day13/src/utils/request.js"],"names":["axios","service","create","baseURL","process","env","VUE_APP_BASE_API","withCredentials","timeout","interceptors","request","use","config","error","console","log","Promise","reject","response","res","data","code","Error","message","Message","type","duration"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;AACA;AACA;AAEA;;AACA,IAAMC,OAAO,GAAGD,KAAK,CAACE,MAAN,CAAa;AAC3BC,EAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC,gBADM;AACY;AACvCC,EAAAA,eAAe,EAAE,IAFU;AAEJ;AACvBC,EAAAA,OAAO,EAAE,IAHkB,CAGb;;AAHa,CAAb,CAAhB,C,CAMA;;AACAP,OAAO,CAACQ,YAAR,CAAqBC,OAArB,CAA6BC,GAA7B,CACE,UAAAC,MAAM,EAAI;AACR;AAEA;AACE;AACA;AACA;AACA;AACF;AACA,SAAOA,MAAP;AACD,CAXH,EAYE,UAAAC,KAAK,EAAI;AACP;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EAFO,CAEY;;AACnB,SAAOG,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACD,CAhBH,E,CAmBA;;AACAZ,OAAO,CAACQ,YAAR,CAAqBS,QAArB,CAA8BP,GAA9B;AACE;;;;;AAKA;;;;;AAKA,UAAAO,QAAQ,EAAI;AACV,MAAMC,GAAG,GAAGD,QAAQ,CAACE,IAArB;AACA,WAFU,CAGV;;AACA,MAAID,GAAG,CAACE,IAAJ,KAAa,GAAjB,EAAsB;AACpB;AACA;AACA;AACA;AACA;AAEA;AACA,QAAIF,GAAG,CAACE,IAAJ,KAAa,KAAb,IAAsBF,GAAG,CAACE,IAAJ,KAAa,KAAnC,IAA4CF,GAAG,CAACE,IAAJ,KAAa,KAA7D,EAAoE,CAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AACD,WAAOL,OAAO,CAACC,MAAR,CAAe,IAAIK,KAAJ,CAAUH,GAAG,CAACI,OAAJ,IAAe,OAAzB,CAAf,CAAP;AACD,GArBD,MAqBO;AACL,WAAOJ,GAAP;AACD;AACF,CAvCH,EAwCE,UAAAN,KAAK,EAAI;AACPC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAQF,KAApB,EADO,CACoB;;AAC3BW,EAAAA,OAAO,CAAC;AACND,IAAAA,OAAO,EAAEV,KAAK,CAACU,OADT;AAENE,IAAAA,IAAI,EAAE,OAFA;AAGNC,IAAAA,QAAQ,EAAE,IAAI;AAHR,GAAD,CAAP;AAKA,SAAOV,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACD,CAhDH;AAmDA,eAAeZ,OAAf","sourcesContent":["import axios from 'axios'\n// import { MessageBox, Message } from 'element-ui'\n// import store from '@/store'\n// import { getToken } from '@/utils/auth'\n\n// create an axios instance\nconst service = axios.create({\n  baseURL: process.env.VUE_APP_BASE_API, // url = base url + request url\n  withCredentials: true, // send cookies when cross-domain requests\n  timeout: 5000 // request timeout\n})\n\n// request interceptor\nservice.interceptors.request.use(\n  config => {\n    // do something before request is sent\n\n    // if (store.getters.token) {\n      // let each request carry token\n      // ['X-Token'] is a custom headers key\n      // please modify it according to the actual situation\n      // config.headers['X_ACCESS_TOKEN'] = \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1OTM2MTU0MzUsInVzZXJuYW1lIjoiMTU4NTI1MzcwNjUifQ.cnyJ0fPcnLAUl2dxp1jPt2zBPjhKby9djRhvuxzao3o\";//getToken()\n    // }\n    return config\n  },\n  error => {\n    // do something with request error\n    console.log(error) // for debug\n    return Promise.reject(error)\n  }\n)\n\n// response interceptor\nservice.interceptors.response.use(\n  /**\n   * If you want to get http information such as headers or status\n   * Please return  response => response\n  */\n\n  /**\n   * Determine the request status by custom code\n   * Here is just an example\n   * You can also judge the status by HTTP Status Code\n   */\n  response => {\n    const res = response.data\n    debugger\n    // if the custom code is not 20000, it is judged as an error.\n    if (res.code !== 200) {\n      // Message({\n      //   message: res.message || 'Error',\n      //   type: 'error',\n      //   duration: 5 * 1000\n      // })\n\n      // 50008: Illegal token; 50012: Other clients logged in; 50014: Token expired;\n      if (res.code === 50008 || res.code === 50012 || res.code === 50014) {\n        // to re-login\n        // MessageBox.confirm('You have been logged out, you can cancel to stay on this page, or log in again', 'Confirm logout', {\n        //   confirmButtonText: 'Re-Login',\n        //   cancelButtonText: 'Cancel',\n        //   type: 'warning'\n        // }).then(() => {\n        //   // store.dispatch('user/resetToken').then(() => {\n        //   //   location.reload()\n        //   // })\n        // })\n      }\n      return Promise.reject(new Error(res.message || 'Error'))\n    } else {\n      return res\n    }\n  },\n  error => {\n    console.log('err' + error) // for debug\n    Message({\n      message: error.message,\n      type: 'error',\n      duration: 5 * 1000\n    })\n    return Promise.reject(error)\n  }\n)\n\nexport default service\n"]}]}