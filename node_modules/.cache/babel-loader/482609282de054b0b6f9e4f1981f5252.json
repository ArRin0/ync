{"remainingRequest":"C:\\Users\\asus\\Desktop\\ync\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\asus\\Desktop\\ync\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\asus\\Desktop\\ync\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\asus\\Desktop\\ync\\src\\pages\\index\\current-session\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\asus\\Desktop\\ync\\src\\pages\\index\\current-session\\index.vue","mtime":1594350697000},{"path":"C:\\Users\\asus\\Desktop\\ync\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1594568584718},{"path":"C:\\Users\\asus\\Desktop\\ync\\node_modules\\babel-loader\\lib\\index.js","mtime":1594568583942},{"path":"C:\\Users\\asus\\Desktop\\ync\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1594568584718},{"path":"C:\\Users\\asus\\Desktop\\ync\\node_modules\\vue-loader\\lib\\index.js","mtime":1594568601747}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\nimport SessionList from \"../components/SessionList.vue\";\nimport SessionWindow from \"../components/SessionWindow.vue\";\nexport default {\n  name: \"CurrentSession\",\n  components: {\n    SessionList: SessionList,\n    SessionWindow: SessionWindow\n  },\n  data: function data() {\n    return {\n      session: null,\n      socket: null,\n      sessionList: [],\n      msgs: []\n    };\n  },\n  methods: {\n    noticeWindow: function noticeWindow(session) {\n      this.session = session;\n      this.msgs = [];\n    },\n    initWebsocket: function initWebsocket() {\n      var _this = this;\n\n      if (typeof WebSocket == \"undefined\") {\n        console.log(\"您的浏览器不支持WebSocket\");\n      } else {\n        console.log(\"您的浏览器支持WebSocket\"); //实现化WebSocket对象，指定要连接的服务器地址与端口  建立连接\n\n        var userId = JSON.parse(localStorage.getItem(\"user\")).id;\n        var socketUrl = \"ws://localhost:8080/ccs/webSocket/\" + userId + \"/cs\"; // var socketUrl=\"ws://192.168.0.231:22599/webSocket/\"+userId;\n\n        console.log(socketUrl);\n\n        if (this.socket != null) {\n          this.socket.close();\n          this.socket = null;\n        }\n\n        this.socket = new WebSocket(socketUrl); //打开事件\n\n        this.socket.onopen = function () {\n          console.log(\"websocket已打开\"); //socket.send(\"这是来自客户端的消息\" + location.href + new Date());\n        }; //获得消息事件\n\n\n        this.socket.onmessage = function (resp) {\n          var data = JSON.parse(resp.data);\n\n          if (data.type) {\n            _this.sessionList = data.sessionList;\n          } else {\n            _this.msgs.push(data);\n\n            console.log(_this.msgs);\n          } // console.log(this.sessionList)\n          //当接收到websocket服务器发送当消息当时候，判断消息是会话列表有更新还是会话消息有更新，更新对应当子组件\n\n        }; //关闭事件\n\n\n        this.socket.onclose = function () {\n          console.log(\"websocket已关闭\");\n        }; //发生了错误事件\n\n\n        this.socket.onerror = function () {\n          console.log(\"websocket发生了错误\");\n        };\n      }\n    }\n  },\n  mounted: function mounted() {\n    // 当页面显示后，客服应该连接websocket\n    this.initWebsocket();\n  }\n};",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;AAQA,OAAA,WAAA;AACA,OAAA,aAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,gBADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,WAAA,EAAA,WADA;AACA,IAAA,aAAA,EAAA;AADA,GAFA;AAKA,EAAA,IAAA,EAAA,gBAAA;AACA,WAAA;AACA,MAAA,OAAA,EAAA,IADA;AAEA,MAAA,MAAA,EAAA,IAFA;AAGA,MAAA,WAAA,EAAA,EAHA;AAIA,MAAA,IAAA,EAAA;AAJA,KAAA;AAMA,GAZA;AAaA,EAAA,OAAA,EAAA;AACA,IAAA,YAAA,EAAA,sBAAA,OAAA,EAAA;AACA,WAAA,OAAA,GAAA,OAAA;AACA,WAAA,IAAA,GAAA,EAAA;AACA,KAJA;AAKA,IAAA,aAAA,EAAA,yBAAA;AAAA;;AACA,UAAA,OAAA,SAAA,IAAA,WAAA,EAAA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,mBAAA;AACA,OAFA,MAEA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,kBAAA,EADA,CAEA;;AACA,YAAA,MAAA,GAAA,IAAA,CAAA,KAAA,CAAA,YAAA,CAAA,OAAA,CAAA,MAAA,CAAA,EAAA,EAAA;AACA,YAAA,SAAA,GAAA,uCAAA,MAAA,GAAA,KAAA,CAJA,CAKA;;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,SAAA;;AACA,YAAA,KAAA,MAAA,IAAA,IAAA,EAAA;AACA,eAAA,MAAA,CAAA,KAAA;AACA,eAAA,MAAA,GAAA,IAAA;AACA;;AACA,aAAA,MAAA,GAAA,IAAA,SAAA,CAAA,SAAA,CAAA,CAXA,CAYA;;AACA,aAAA,MAAA,CAAA,MAAA,GAAA,YAAA;AACA,UAAA,OAAA,CAAA,GAAA,CAAA,cAAA,EADA,CAEA;AACA,SAHA,CAbA,CAiBA;;;AACA,aAAA,MAAA,CAAA,SAAA,GAAA,UAAA,IAAA,EAAA;AACA,cAAA,IAAA,GAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,IAAA,CAAA;;AACA,cAAA,IAAA,CAAA,IAAA,EAAA;AACA,YAAA,KAAA,CAAA,WAAA,GAAA,IAAA,CAAA,WAAA;AACA,WAFA,MAEA;AACA,YAAA,KAAA,CAAA,IAAA,CAAA,IAAA,CAAA,IAAA;;AACA,YAAA,OAAA,CAAA,GAAA,CAAA,KAAA,CAAA,IAAA;AACA,WAPA,CAQA;AACA;;AACA,SAVA,CAlBA,CA6BA;;;AACA,aAAA,MAAA,CAAA,OAAA,GAAA,YAAA;AACA,UAAA,OAAA,CAAA,GAAA,CAAA,cAAA;AACA,SAFA,CA9BA,CAiCA;;;AACA,aAAA,MAAA,CAAA,OAAA,GAAA,YAAA;AACA,UAAA,OAAA,CAAA,GAAA,CAAA,gBAAA;AACA,SAFA;AAGA;AACA;AA9CA,GAbA;AA6DA,EAAA,OA7DA,qBA6DA;AACA;AACA,SAAA,aAAA;AACA;AAhEA,CAAA","sourcesContent":["<template>\n\t<div class=\"current-session\">\n\t\t<session-list type=\"current\" @selectedSession=\"noticeWindow\" :sessionList=\"sessionList\"></session-list>\n\t\t<session-window :session=\"session\" :msgs=\"msgs\" :socket=\"socket\"></session-window>\n\t</div>\n</template>\n\n<script>\n\timport SessionList from '../components/SessionList.vue'\n\timport SessionWindow from '../components/SessionWindow.vue'\n\t\n\texport default{\n\t\tname:\"CurrentSession\",\n\t\tcomponents:{\n\t\t\tSessionList,SessionWindow\n\t\t},\n\t\tdata:function(){\n\t\t\treturn {\n\t\t\t\tsession:null,\n\t\t\t\tsocket:null,\n\t\t\t\tsessionList:[],\n\t\t\t\tmsgs:[]\n\t\t\t}\n\t\t},\n\t\tmethods:{\n\t\t\tnoticeWindow:function(session){\n\t\t\t\tthis.session = session;\n\t\t\t\tthis.msgs=[]\n\t\t\t},\n\t\t\tinitWebsocket:function(){\n\t\t\t\tif(typeof(WebSocket) == \"undefined\") {\n\t\t\t\t    console.log(\"您的浏览器不支持WebSocket\");\n\t\t\t\t}else{\n\t\t\t\t    console.log(\"您的浏览器支持WebSocket\");\n\t\t\t\t    //实现化WebSocket对象，指定要连接的服务器地址与端口  建立连接\n\t\t\t\t    var userId = JSON.parse(localStorage.getItem(\"user\")).id;\n\t\t\t\t    var socketUrl=\"ws://localhost:8080/ccs/webSocket/\"+userId+\"/cs\";\n\t\t\t\t    // var socketUrl=\"ws://192.168.0.231:22599/webSocket/\"+userId;\n\t\t\t\t    console.log(socketUrl);\n\t\t\t\t    if(this.socket!=null){\n\t\t\t\t        this.socket.close();\n\t\t\t\t        this.socket=null;\n\t\t\t\t    }\n\t\t\t\t    this.socket = new WebSocket(socketUrl);\n\t\t\t\t    //打开事件\n\t\t\t\t    this.socket.onopen = function() {\n\t\t\t\t        console.log(\"websocket已打开\");\n\t\t\t\t        //socket.send(\"这是来自客户端的消息\" + location.href + new Date());\n\t\t\t\t    };\n\t\t\t\t    //获得消息事件\n\t\t\t\t    this.socket.onmessage = (resp)=>{\n\t\t\t\t\t\tlet data = JSON.parse(resp.data);\n\t\t\t\t\t\tif(data.type){\n\t\t\t\t\t\t\tthis.sessionList = data.sessionList;\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tthis.msgs.push(data);\n\t\t\t\t\t\t\tconsole.log(this.msgs);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// console.log(this.sessionList)\n\t\t\t\t        //当接收到websocket服务器发送当消息当时候，判断消息是会话列表有更新还是会话消息有更新，更新对应当子组件\n\t\t\t\t    };\n\t\t\t\t    //关闭事件\n\t\t\t\t    this.socket.onclose = function() {\n\t\t\t\t        console.log(\"websocket已关闭\");\n\t\t\t\t    };\n\t\t\t\t    //发生了错误事件\n\t\t\t\t    this.socket.onerror = function() {\n\t\t\t\t        console.log(\"websocket发生了错误\");\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tmounted() {\n\t\t\t// 当页面显示后，客服应该连接websocket\n\t\t\tthis.initWebsocket();\n\t\t}\n\t}\n</script>\n\n<style>\n.current-session{\n\tdisplay: flex;\n}\n\n\n</style>\n"],"sourceRoot":"src/pages/index/current-session"}]}