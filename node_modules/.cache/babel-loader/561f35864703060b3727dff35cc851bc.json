{"remainingRequest":"D:\\文件夹\\项目\\html\\ync\\ync\\node_modules\\babel-loader\\lib\\index.js!D:\\文件夹\\项目\\html\\ync\\ync\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\文件夹\\项目\\html\\ync\\ync\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\文件夹\\项目\\html\\ync\\ync\\src\\components\\line.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\文件夹\\项目\\html\\ync\\ync\\src\\components\\line.vue","mtime":1594697477854},{"path":"D:\\文件夹\\项目\\html\\ync\\ync\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1594697467773},{"path":"D:\\文件夹\\项目\\html\\ync\\ync\\node_modules\\babel-loader\\lib\\index.js","mtime":1594697467416},{"path":"D:\\文件夹\\项目\\html\\ync\\ync\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1594697467773},{"path":"D:\\文件夹\\项目\\html\\ync\\ync\\node_modules\\vue-loader\\lib\\index.js","mtime":1594697476916}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\nexport default {\n  name: \"linechart\",\n  props: [\"id\", \"data\"],\n  //接受从父组件传回的值\n  data: function data() {\n    return {};\n  },\n  //实时监听父组件传过来的值\n  //然后执行drawBar方法 重新绘制柱状图\n  watch: {\n    data: {\n      handler: function handler(value) {\n        this.drawBar(value);\n      },\n      deep: true,\n      //深度监听\n      immediate: true\n    }\n  },\n  mounted: function mounted() {\n    this.drawBar(this.data);\n  },\n  methods: {\n    drawBar: function drawBar() //作为一个整体的参数\n    {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref$textTile = _ref.textTile,\n          textTile = _ref$textTile === void 0 ? '' : _ref$textTile,\n          _ref$nameArray = _ref.nameArray,\n          nameArray = _ref$nameArray === void 0 ? [] : _ref$nameArray,\n          _ref$series = _ref.series,\n          series = _ref$series === void 0 ? [] : _ref$series;\n\n      //现在是真正开始画图表的时候\n      var barBox = this.$echarts.init(document.getElementById(this.id)); //给图表一个指定的容器dom\n\n      var option = {\n        //设置图表的options\n        //1.先设置图表的标题\n        title: {\n          text: textTile,\n          //使用父组件传过来的数据\n          x: 50,\n          y: 15,\n          textStyle: {\n            width: 218,\n            height: 24,\n            fontSize: 18,\n            fontWeight: 0\n          }\n        },\n        tooltip: {\n          //折线拐点提示\n          trigger: 'axis'\n        },\n        //3.x轴相关结构\n        xAxis: {\n          data: nameArray,\n          boundaryGap: false,\n          type: 'category',\n          axisLine: {\n            lineStyle: {\n              color: 'grey',\n              width: 2\n            }\n          }\n        },\n        //4.y轴相关结构\n        yAxis: {\n          type: 'value',\n          boundaryGap: [52, 52],\n          max: 75,\n          min: 0,\n          interval: 15,\n          axisLine: {\n            lineStyle: {\n              color: 'grey',\n              width: 0\n            }\n          }\n        },\n        //6.图表的相关series设置\n        series: series\n      }; //柱状图的相关结构已经定义好了调用setoption\n\n      barBox.setOption(option, true);\n      console.log(option);\n      window.addEventListener(\"resize\", function () {\n        barBox.resize();\n      });\n    }\n  }\n};",{"version":3,"sources":["line.vue"],"names":[],"mappings":";;;;;;AAOA,eAAA;AACA,EAAA,IAAA,EAAA,WADA;AAEA,EAAA,KAAA,EAAA,CAAA,IAAA,EAAA,MAAA,CAFA;AAEA;AACA,EAAA,IAHA,kBAGA;AACA,WAAA,EAAA;AACA,GALA;AAMA;AACA;AACA,EAAA,KAAA,EAAA;AACA,IAAA,IAAA,EAAA;AACA,MAAA,OADA,mBACA,KADA,EACA;AACA,aAAA,OAAA,CAAA,KAAA;AACA,OAHA;AAIA,MAAA,IAAA,EAAA,IAJA;AAIA;AACA,MAAA,SAAA,EAAA;AALA;AADA,GARA;AAiBA,EAAA,OAjBA,qBAiBA;AACA,SAAA,OAAA,CAAA,KAAA,IAAA;AACA,GAnBA;AAoBA,EAAA,OAAA,EAAA;AACA,IAAA,OADA,qBAKA;AACA;AAAA,qFADA,EACA;AAAA,+BAJA,QAIA;AAAA,UAJA,QAIA,8BAJA,EAIA;AAAA,gCAHA,SAGA;AAAA,UAHA,SAGA,+BAHA,EAGA;AAAA,6BAFA,MAEA;AAAA,UAFA,MAEA,4BAFA,EAEA;;AAAA;AACA,UAAA,MAAA,GAAA,KAAA,QAAA,CAAA,IAAA,CAAA,QAAA,CAAA,cAAA,CAAA,KAAA,EAAA,CAAA,CAAA,CADA,CAEA;;AACA,UAAA,MAAA,GAAA;AAAA;AACA;AACA,QAAA,KAAA,EAAA;AACA,UAAA,IAAA,EAAA,QADA;AACA;AACA,UAAA,CAAA,EAAA,EAFA;AAGA,UAAA,CAAA,EAAA,EAHA;AAIA,UAAA,SAAA,EAAA;AACA,YAAA,KAAA,EAAA,GADA;AAEA,YAAA,MAAA,EAAA,EAFA;AAGA,YAAA,QAAA,EAAA,EAHA;AAIA,YAAA,UAAA,EAAA;AAJA;AAJA,SAFA;AAaA,QAAA,OAAA,EAAA;AAAA;AACA,UAAA,OAAA,EAAA;AADA,SAbA;AAgBA;AACA,QAAA,KAAA,EACA;AACA,UAAA,IAAA,EAAA,SADA;AAEA,UAAA,WAAA,EAAA,KAFA;AAGA,UAAA,IAAA,EAAA,UAHA;AAIA,UAAA,QAAA,EAAA;AACA,YAAA,SAAA,EAAA;AACA,cAAA,KAAA,EAAA,MADA;AAEA,cAAA,KAAA,EAAA;AAFA;AADA;AAJA,SAlBA;AA6BA;AACA,QAAA,KAAA,EACA;AACA,UAAA,IAAA,EAAA,OADA;AAEA,UAAA,WAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAFA;AAGA,UAAA,GAAA,EAAA,EAHA;AAIA,UAAA,GAAA,EAAA,CAJA;AAKA,UAAA,QAAA,EAAA,EALA;AAMA,UAAA,QAAA,EAAA;AACA,YAAA,SAAA,EAAA;AACA,cAAA,KAAA,EAAA,MADA;AAEA,cAAA,KAAA,EAAA;AAFA;AADA;AANA,SA/BA;AA6CA;AACA,QAAA,MAAA,EAAA;AA9CA,OAAA,CAHA,CAmDA;;AACA,MAAA,MAAA,CAAA,SAAA,CAAA,MAAA,EAAA,IAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,MAAA;AACA,MAAA,MAAA,CAAA,gBAAA,CAAA,QAAA,EAAA,YAAA;AACA,QAAA,MAAA,CAAA,MAAA;AACA,OAFA;AAGA;AA/DA;AApBA,CAAA","sourcesContent":["<template>\r\n  <div class=\"echarts\">\r\n      <div v-bind:id=id ref=\"data\" style=\"width: 837px;height: 357px\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  export default {\r\n    name: \"linechart\",\r\n    props: [\"id\", \"data\"], //接受从父组件传回的值\r\n    data() {\r\n      return {}\r\n    },\r\n    //实时监听父组件传过来的值\r\n    //然后执行drawBar方法 重新绘制柱状图\r\n    watch: {\r\n      data: {\r\n        handler(value) {\r\n          this.drawBar(value);\r\n        },\r\n        deep: true,//深度监听\r\n\t\timmediate: true,\r\n      }\r\n    },\r\n    mounted() {\r\n      this.drawBar(this.data)\r\n    },\r\n    methods: {\r\n      drawBar({\r\n                textTile = '',  // 标题 柱状图options里需要用的数据这里作为参数从data里面取值\r\n                nameArray = [],//x轴的数据\r\n                series = [],//series的数据\r\n              } = {}  //作为一个整体的参数\r\n      ) {   //现在是真正开始画图表的时候\r\n        let barBox = this.$echarts.init(document.getElementById(this.id));\r\n        //给图表一个指定的容器dom\r\n        let option = { //设置图表的options\r\n          //1.先设置图表的标题\r\n          title: {\r\n            text: textTile,//使用父组件传过来的数据\r\n            x:50,\r\n\t\t\ty:15,\r\n            textStyle:{\r\n            \twidth: 218,\r\n            \theight: 24,\r\n            \tfontSize: 18,\r\n            \tfontWeight: 0,\r\n            }\r\n          },\r\n\t\t  tooltip: {//折线拐点提示\r\n\t\t       trigger: 'axis'\r\n\t\t  },\r\n          //3.x轴相关结构\r\n          xAxis:\r\n            {\r\n              data: nameArray,\r\n\t\t\t  boundaryGap: false,\r\n              type: 'category',\r\n              axisLine:{\r\n              \tlineStyle:{\r\n              \t\tcolor: 'grey',\r\n              \t\twidth: 2,\r\n              \t}\r\n              },\r\n              }, \r\n          //4.y轴相关结构\r\n          yAxis:\r\n            {\r\n              type: 'value',\r\n              boundaryGap: [52, 52],\r\n              max: 75,\r\n              min: 0,\r\n              interval: 15,\r\n              axisLine:{\r\n              \tlineStyle:{\r\n              \t\tcolor: 'grey',\r\n              \t\twidth: 0,\r\n              \t}\r\n              }\r\n            },\r\n\r\n          //6.图表的相关series设置\r\n          series: series,\r\n        };\r\n        //柱状图的相关结构已经定义好了调用setoption\r\n        barBox.setOption(option, true);\r\n        console.log(option)\r\n        window.addEventListener(\"resize\", function () {\r\n          barBox.resize();\r\n        })\r\n      }\r\n    },\r\n  }\r\n</script>\r\n\r\n\r\n<style>\r\n</style>\r\n"],"sourceRoot":"src/components"}]}